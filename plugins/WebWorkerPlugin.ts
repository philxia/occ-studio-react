import WasmPlugin from "./WasmPlugin";

// This plugin lets you use web worker scripts the same way you do with Webpack's worker-loader.
const path = require('path');
const esbuild = require('esbuild');

const WebWorkerPlugin = {
    name: 'webWorker',
    setup(build: any) {
        build.onResolve({ filter: /worker.ts/ }, (args: any) => {
            // Feel free to remove this logline once you verify that the plugin works for your setup
            console.debug(`The web worker plugin matched an import to ${args.path} from ${args.importer}`);
            return {
                path: args.path,
                namespace: 'webWorker',
                pluginData: { importer: args.importer },
            };
        });
        build.onLoad({ filter: /.*/, namespace: 'webWorker' }, async (args: any) => {
            const { path: importPath, pluginData: { importer } } = args;

            const workerWithFullPath = path.join(path.dirname(importer), importPath);
            const workerFileName = path.basename(workerWithFullPath);

            // You only need this for TypeScript
            // because the import will refer to a .ts file
            // but the web worker will need to point to a .js file
            const outFileName = workerFileName.replace(/\.ts$/, '.js');

            // This one depends on your file structure
            const outFileWithRelativePath = path.join('dist', 'bundle', outFileName);

            try {
                await esbuild.build({
                    entryPoints: [workerWithFullPath],
                    outfile: outFileWithRelativePath,
                    minify: false,
                    bundle: true,
                    external: ['require', 'fs', 'path', 'url', 'stream', 'crypto', 'tls', 'net', 'http', 'zlib', 'https', 'child_process'],
                    plugins: [WasmPlugin],
                    platform: 'browser'
                });
                return {
                    contents: `
// This file is generated by esbuild to expose the worker script as a class, like Webpack's worker-loader
export default class {
    constructor() {
        // This path depends on how you serve your files
        return new Worker('/bundle/${outFileName}');
    }
}
`,
                };
            } catch (e) {
                console.error('Could not build worker script:', e);
            }
        });
    },
};

export default WebWorkerPlugin;